/*
Here is an example engine schematic:

467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..

In this schematic, two numbers are not part numbers because they are not adjacent to a symbol: 114 (top right) and 58 (middle right). Every other number is adjacent to a symbol and so is a part number; their sum is 4361.
*/

package main

import (
	"testing"

	"github.com/matryer/is"
)

func TestPart1(t *testing.T) {
	is := is.New(t)

	testCases := map[string]struct {
		in   []string
		want int
	}{
		"empty": {[]string{}, 0},
		"example engine schematic": {
			[]string{
				"467..114..",
				"...*......",
				"..35..633.",
				"......#...",
				"617*......",
				".....+.58.",
				"..592.....",
				"......755.",
				"...$.*....",
				".664.598..",
			},
			4361,
		},
		"example engine schematic with right edge trimmed for flush values": {
			[]string{
				"467..114.",
				"...*.....",
				"..35..633",
				"......#..",
				"617*.....",
				".....+.58",
				"..592....",
				"......755",
				"...$.*...",
				".664.598.",
			},
			4361,
		},
		"lines 1 through 5 of real input plus symbols only from 6": {
			[]string{
				".242......276....234............682.......................958..695..742................714......574..............833.........159....297.686.",
				".............*............................612*......304..*..........*.......@175...#...*...........*890...........*.............*..*........",
				"..........346......................997........923......*..253..........698........122.746.....-832..........766.432..229.....674....415.....",
				"...............#76...........332....*...............111...........785..............................=..720..*........*.......................",
				"........204............396..*.....357..438*694...............154.................................26...*....422...200.../201.................",
				".......*..............+.........................................*.................#................................................%........",
			},
			276 + 958 + 742 + 714 + 574 + 833 + 159 + 297 +
				612 + 304 + 175 + 890 +
				346 + 997 + 923 + 253 + 122 + 746 + 832 + 766 + 432 + 229 + 674 + 415 +
				76 + 332 + 111 + 720 +
				204 + 396 + 357 + 438 + 694 + 154 + 26 + 422 + 200 + 201,
		},
		"lines 5 through 10 of real input plus symbols only from 4 and 11": {
			[]string{
				"...............#....................*..............................................................=.......*........*.......................",
				"....859*......496.598.+....810........................816.......*713...........802#.........330......540...........................%344.....",
				"..............*.....*..........344.......................*.............671............994.................467...............................",
				"........$..388.........152*141..*......73.719...$526....830...759......%......943............541.624.781...*...$150.............966.........",
				".....877.......................67.....*.....*.............................859..*..502+........$..*.....*.425........778.../........*........",
				"................142.....569..........563...57......786..........303.......*...255.......*638....979..704...........*.......181..............",
				"...................%....+............................=......................................................................................",
			},
			859 + 496 + 598 + 816 + 713 + 802 + 344 +
				344 + 671 + 467 +
				388 + 152 + 141 + 73 + 719 + 526 + 830 + 943 + 541 + 624 + 781 + 150 + 966 +
				877 + 67 + 859 + 502 + 425 + 778 +
				142 + 569 + 563 + 57 + 786 + 255 + 638 + 979 + 704 + 181,
		},
		"lines 11 through 15 of real input plus symbols only from 10 and 16": {
			[]string{
				"..........................................................................*.............*..........................*........................",
				"...........560.....%....+......................276...=..................939..........194.........................675..............741.......",
				"......681...*..................882..714................741......650.........&.................374...542/..........................*.........",
				"344*.....%.340......$.....%......=.....*.....799...990...*.........*733..811.....................-...............8........844...660.........",
				"....937.........301.227.775.24+....=.146..../.....*.......983...+.....................*822.898&.................*.....611*..............693.",
				"...........&.....................328............254..582.......528...359&..........536..........*889........%...........................#...",
				".....................................................*...........................................................@..........................",
			},
			560 + 939 + 194 + 675 + 741 +
				681 + 882 + 714 + 741 + 650 + 374 + 542 +
				344 + 340 + 799 + 990 + 733 + 811 + 8 + 844 + 660 +
				937 + 227 + 775 + 24 + 146 + 983 + 822 + 898 + 611 + 693 +
				328 + 254 + 582 + 528 + 359 + 536 + 889,
		},
	}

	for desc, testCase := range testCases {
		desc, testCase := desc, testCase

		t.Run(desc, func(t *testing.T) {
			is := is.New(t)

			got, err := Part1(testCase.in)
			is.NoErr(err)
			is.Equal(got, testCase.want) // got != want
		})
	}
}

func TestLookAround(t *testing.T) {
	is := is.New(t)

	testCases := map[string]struct {
		in                 [][]rune
		row, index, length int
		want               bool
	}{
		"empty": {
			[][]rune{}, 0, 0, 0, false,
		},
		"tight": {
			[][]rune{
				{'4', '6', '7'},
			},
			0, 0, 3,
			false,
		},
		"opposite T": {
			[][]rune{
				{'.', '4', '.'},
				{'.', '.', '.'},
				{'.', '$', '.'},
			},
			0, 1, 1,
			false,
		},
		"opposite R": {
			[][]rune{
				{'.', '.', '.'},
				{'$', '.', '4'},
				{'.', '.', '.'},
			},
			1, 2, 1,
			false,
		},
		"opposite B": {
			[][]rune{
				{'.', '$', '.'},
				{'.', '.', '.'},
				{'.', '4', '.'},
			},
			2, 1, 1,
			false,
		},
		"opposite L": {
			[][]rune{
				{'.', '.', '.'},
				{'4', '.', '$'},
				{'.', '.', '.'},
			},
			1, 0, 1,
			false,
		},
		"diagonal opposite TL": {
			[][]rune{
				{'4', '.', '.'},
				{'.', '.', '.'},
				{'.', '.', '$'},
			},
			0, 0, 1,
			false,
		},
		"diagonal opposite TR": {
			[][]rune{
				{'.', '.', '4'},
				{'.', '.', '.'},
				{'$', '.', '.'},
			},
			0, 2, 1,
			false,
		},
		"diagonal opposite BL": {
			[][]rune{
				{'.', '.', '$'},
				{'.', '.', '.'},
				{'4', '.', '.'},
			},
			2, 0, 1,
			false,
		},
		"diagonal opposite BR": {
			[][]rune{
				{'$', '.', '.'},
				{'.', '.', '.'},
				{'.', '.', '4'},
			},
			2, 2, 1,
			false,
		},
		"knight TL": {
			[][]rune{
				{'$', '.', '.'},
				{'.', '.', '4'},
				{'.', '7', '.'},
			},
			1, 2, 1,
			false,
		},
		"knight TR 4": {
			[][]rune{
				{'.', '.', '$'},
				{'4', '.', '.'},
				{'.', '7', '.'},
			},
			1, 0, 1,
			false,
		},
		"knight TR 7": {
			[][]rune{
				{'.', '.', '$'},
				{'4', '.', '.'},
				{'.', '7', '.'},
			},
			2, 1, 1,
			false,
		},
		"knight BL": {
			[][]rune{
				{'.', '7', '.'},
				{'.', '.', '4'},
				{'$', '.', '.'},
			},
			0, 1, 1,
			false,
		},
		"knight BR": {
			[][]rune{
				{'.', '7', '.'},
				{'4', '.', '.'},
				{'.', '.', '$'},
			},
			0, 1, 1,
			false,
		},
		"diagonal": {
			[][]rune{
				{'4', '6', '7', '.'},
				{'.', '.', '.', '*'},
			},
			0, 0, 3,
			true,
		},
		"below": {
			[][]rune{
				{'4', '6', '7', '.'},
				{'.', '+', '.', '.'},
			},
			0, 0, 3,
			true,
		},
		"above": {
			[][]rune{
				{'.', '+', '.', '.'},
				{'4', '6', '7', '.'},
				{'.', '.', '.', '.'},
			},
			1, 0, 3,
			true,
		},
		"left": {
			[][]rune{
				{'.', '.', '.', '.', '.'},
				{'#', '4', '6', '7', '.'},
				{'.', '.', '.', '.', '.'},
			},
			1, 1, 3,
			true,
		},
		"left doubles before": {
			[][]rune{
				{'.', '.', '.', '.', '.'},
				{'#', '4', '.', '7', '.'},
				{'.', '.', '.', '.', '.'},
			},
			1, 1, 1,
			true,
		},
		"left doubles after left": {
			[][]rune{
				{'.', '.', '.', '.', '.'},
				{'.', '4', '#', '7', '.'},
				{'.', '.', '.', '.', '.'},
			},
			1, 1, 1,
			true,
		},
		"left doubles before right": {
			[][]rune{
				{'.', '.', '.', '.', '.'},
				{'.', '4', '#', '7', '.'},
				{'.', '.', '.', '.', '.'},
			},
			1, 3, 1,
			true,
		},
		"right": {
			[][]rune{
				{'.', '.', '.', '.', '.'},
				{'.', '4', '6', '7', '$'},
				{'.', '.', '.', '.', '.'},
			},
			1, 1, 3,
			true,
		},
		"right doubles": {
			[][]rune{
				{'.', '.', '.', '.', '.'},
				{'.', '4', '.', '7', '$'},
				{'.', '.', '.', '.', '.'},
			},
			1, 3, 1,
			true,
		},
		"negative": {
			[][]rune{
				{'.', '.', '.', '.', '.'},
				{'.', '4', '6', '7', '.'},
				{'.', '.', '.', '.', '.'},
			},
			1, 1, 3,
			false,
		},
		"negative doubles": {
			[][]rune{
				{'.', '.', '.', '.', '.'},
				{'.', '4', '.', '7', '.'},
				{'.', '.', '.', '.', '.'},
			},
			1, 1, 1,
			false,
		},
		"big negative": {
			[][]rune{
				{'.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '4', '7', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.'},
			},
			2, 2, 2,
			false,
		},
		"big diagonal TL": {
			[][]rune{
				{'.', '.', '.', '.', '.', '.', '.'},
				{'.', '!', '.', '.', '.', '.', '.'},
				{'.', '.', '4', '7', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.'},
			},
			2, 2, 2,
			true,
		},
		"big diagonal TR": {
			[][]rune{
				{'.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '!', '.', '.'},
				{'.', '.', '4', '7', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.'},
			},
			2, 2, 2,
			true,
		},
		"big diagonal BL": {
			[][]rune{
				{'.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '4', '7', '.', '.', '.'},
				{'.', '!', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.'},
			},
			2, 2, 2,
			true,
		},
		"big diagonal BR": {
			[][]rune{
				{'.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '4', '7', '.', '.', '.'},
				{'.', '.', '.', '.', '$', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.'},
			},
			2, 2, 2,
			true,
		},
	}

	for desc, testCase := range testCases {
		desc, testCase := desc, testCase

		t.Run(desc, func(t *testing.T) {
			is := is.New(t)

			got := lookAround(testCase.in, testCase.row, testCase.index, testCase.length)
			is.Equal(got, testCase.want)
		})
	}
}
