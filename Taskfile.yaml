# https://taskfile.dev

version: 3

output: prefixed

run: when_changed

# Bash allows you to change the values of shell options:
# https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html
set:
  # Exit immediately if a command returns a non-zero status.
  - errexit
  # Treat unset variables as an error when substituting.
  - nounset
  # The return value of a pipeline is the value of the last (rightmost) command to exit with a non-zero status, or zero
  # if all commands in the pipeline exit successfully.
  - pipefail

# Bash also allows you to change additional shell optional behavior:
# https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
shopt:
  # If set, the pattern ** used in a name expansion context will match all files and zero or more directories and
  # subdirectories. If the pattern is followed by a '/', only directories and subdirectories match.
  - globstar

vars:
  # Search underneath the repo's root directory for any sub-directories containing a 'go.mod' file.
  GO_MODULES:
    sh: find {{.ROOT_DIR}} -name 'go.mod' -type f -execdir pwd \;

tasks:
  ###
  ### Lint each Go module and track checksums separately
  ###
  go:lint:
    deps:
      - go:lint:gofumpt
      - go:lint:golangci
      - go:lint:vet
    desc: Lint each Go module separately.

  go:lint:gofumpt:
    preconditions:
      - sh: command -v gofumpt
        msg: 'Required CLI command `gofumpt` missing. Please install it: https://github.com/mvdan/gofumpt'
    cmds:
      - for:
          var: GO_MODULES
        task: go:cmd
        vars:
          COMMAND: gofumpt -l -extra .
          MODULE: '{{.ITEM}}'
          PREFIX: lint-gofumpt
    desc: Enforce a stricter format than gofmt, while being backwards compatible.
    # TODO(jlucktay): watch https://github.com/mvdan/gofumpt/issues/114 for exit status changes, to enforce this.
    dir: '{{.ROOT_DIR}}'
    requires:
      vars:
        - GO_MODULES

  go:lint:golangci:
    preconditions:
      - sh: command -v golangci-lint
        msg: 'Required CLI command `golangci-lint` missing. Please install it: https://golangci-lint.run'
    cmds:
      - for:
          var: GO_MODULES
        task: go:cmd
        vars:
          COMMAND: golangci-lint run ./... --color=always
          MODULE: '{{.ITEM}}'
          PREFIX: lint-golangci
    desc: golangci-lint is a Go linters aggregator.
    dir: '{{.ROOT_DIR}}'
    requires:
      vars:
        - GO_MODULES

  go:lint:vet:
    cmds:
      - for:
          var: GO_MODULES
        task: go:cmd
        vars:
          COMMAND: go vet ./...
          MODULE: '{{.ITEM}}'
    desc: Vet examines Go source code and reports suspicious constructs.
    dir: '{{.ROOT_DIR}}'
    preconditions:
      - sh: command -v go
        msg: Go toolchain not found -> https://go.dev/doc/install
    requires:
      vars:
        - GO_MODULES

  ###
  ### Test each Go module and track checksums separately
  ###
  go:test:
    desc: Run tests for each Go module separately.
    requires:
      vars:
        - GO_MODULES
    deps:
      - go:lint
    preconditions:
      - sh: command -v go
        msg: Go toolchain not found -> https://go.dev/doc/install
    cmds:
      - for:
          var: GO_MODULES
        task: go:cmd
        vars:
          COMMAND: go test --count=100 --failfast --race --timeout=10s --vet="" ./...
          MODULE: '{{.ITEM}}'

  go:test:cover:
    cmds:
      - for:
          var: GO_MODULES
        task: go:cmd
        vars:
          COMMAND: >-
            go test --count=1 --covermode=atomic --coverprofile="cover.{{base .ITEM}}.out"
            --failfast --race --vet="" ./...
          MODULE: '{{.ITEM}}'
          PREFIX: test-cover
    deps:
      - go:lint
    desc: Run tests and save a coverage profile for each Go module separately.
    dir: '{{.ROOT_DIR}}'
    preconditions:
      - sh: command -v go
        msg: Go toolchain not found -> https://go.dev/doc/install
    requires:
      vars:
        - GO_MODULES

  go:test:today:
    desc: Run tests for today's Advent only.
    vars:
      TODAY: '{{now | date "2006"}}/day{{now | date "02"}}'
      TODAY_DIR: '{{.ROOT_DIR}}/{{.TODAY}}'
    label: '{{.TODAY}}: test'
    deps:
      - task: go:lint:gofumpt
        vars:
          GO_MODULES: '{{.TODAY_DIR}}'
      - task: go:lint:golangci
        vars:
          GO_MODULES: '{{.TODAY_DIR}}'
      - task: go:lint:vet
        vars:
          GO_MODULES: '{{.TODAY_DIR}}'
    preconditions:
      - sh: command -v go
        msg: Go toolchain not found -> https://go.dev/doc/install
    dir: '{{.TODAY_DIR}}'
    method: checksum
    sources:
      - '**/go.{mod,sum}'
      - '**/*.go'
    cmd: go test --count=10 --failfast --race --timeout=10s --vet="" ./...

  ###
  ### Generic Go command/module runner
  ###
  go:cmd:
    desc: Run '{{.COMMAND}}' on a single Go module.
    internal: true
    requires:
      vars:
        - COMMAND
        - MODULE
    label: >-
      {{osBase (osDir .MODULE)}}/{{osBase .MODULE}}:
      {{if .PREFIX -}}
      {{.PREFIX}}
      {{- else -}}
      {{index (splitList " " (replace "\"" " " .COMMAND)) 1}}
      {{- end}}
    prefix: >-
      {{osBase (osDir .MODULE)}}/{{osBase .MODULE}}:
      {{if .PREFIX -}}
      {{.PREFIX}}
      {{- else -}}
      {{index (splitList " " (replace "\"" " " .COMMAND)) 1}}
      {{- end}}
    sources:
      - '**/go.{mod,sum}'
      - '**/*.go'
    dir: '{{.MODULE}}'
    cmd: '{{.COMMAND}}'

  ###
  ### Clean up build output and temporary tools
  ###
  go:clean:
    deps:
      - go:clean:cover
      - go:clean:go
    desc: Clean up any Go test coverage, and build output.

  go:clean:cover:
    cmd: 'rm -fv {,**/}cover.*.out'
    desc: Delete Go test coverage files.
    dir: '{{.ROOT_DIR}}'
    status:
      # If zero coverage files are found, this status will exit with a zero, so the command won't run.
      - 'exit "$(find . -name "cover.*.out" -type f | wc -l | xargs )"'

  go:clean:go:
    cmds:
      - for:
          var: GO_MODULES
        task: go:cmd
        vars:
          COMMAND: go clean
          MODULE: '{{.ITEM}}'
    desc: Clean removes object files from package source directories.
    dir: '{{.ROOT_DIR}}'
    preconditions:
      - sh: command -v go
        msg: Go toolchain not found -> https://go.dev/doc/install
    requires:
      vars:
        - GO_MODULES

  ###
  ### Templates for a new day
  ###
  go:template:
    desc: Make a copy of some code templates for today's Advent.
    summary: >-
      Set 'AOC_DAY=n' and/or 'AOC_YEAR=n' (where n is a valid integer) to
      override default behaviour of templating for today's date.
    cmds:
      - go run ./template/helper/main.go
      - code {{now | date "2006"}}/day{{now | date "02"}}/{cmd/main,day{{now | date "02"}}*}.go

  ###
  ### Per-module maintenance
  ###
  go:mod:update-all:
    desc: Update dependencies within each Go module.
    cmds:
      - for:
          var: GO_MODULES
        task: go:mod:update
        vars:
          MODULE: '{{.ITEM}}'

  go:mod:update:
    desc: Update dependencies for a single Go module.
    requires:
      vars:
        - MODULE
    vars:
      TASK_LP: '{{osBase (osDir .MODULE)}}/{{osBase .MODULE}}: go:mod:update'
    dir: '{{.MODULE}}'
    label: '{{.TASK_LP}}'
    prefix: '{{.TASK_LP}}'
    cmds:
      - go get -u -v ./...
      - go mod tidy
